#!/usr/bin/env python

Import('env')
Import('env_modules')

# Thirdparty source files

env_webrtc = env_modules.Clone()

thirdparty_dir = "#thirdparty/webrtc/"
thirdparty_sources = [
    "pc/createpeerconnectionfactory.cc",
    "api/jsep.cc",
   # "api/video_codecs/builtin_video_decoder_factory.cc",
#    "api/video_codecs/video_encoder_config.cc",
#    "api/video_codecs/video_encoder.cc",
#    "api/video_codecs/builtin_video_encoder_factory.cc",
#    "api/video_codecs/sdp_video_format.cc",
#    "api/video_codecs/video_decoder.cc",
#    "api/video/video_timing.cc",
#    "api/video/video_source_interface.cc",
#    "api/video/encoded_frame.cc",
#    "api/video/video_bitrate_allocation.cc",
#    "api/video/video_frame.cc",
#    "api/video/video_stream_decoder_create.cc",
#    "api/video/video_frame_buffer.cc",
#    "api/video/video_content_type.cc",
#    "api/video/i420_buffer.cc",
    "api/transport/bitrate_settings.cc",
    "api/transport/network_types.cc",
    "api/call/transport.cc",
#    "api/fakemetricsobserver.cc",
#    "api/rtpreceiverinterface.cc",
    "api/units/timestamp.cc",
    "api/units/data_size.cc",
    "api/units/time_delta.cc",
    "api/units/data_rate.cc",
#    "api/ortc/mediadescription.cc",
    "api/ortc/sessiondescription.cc",
    "api/rtp_headers.cc",
    "api/proxy.cc",
#    "api/mediatypes.cc",
    "api/candidate.cc",
    "api/umametrics.cc",
#    "api/mediastreaminterface.cc",
#    "api/mediaconstraintsinterface.cc",
#    "api/audio_options.cc",
#    "api/audio/echo_canceller3_factory.cc",
#    "api/audio/echo_canceller3_config.cc",
#    "api/audio/audio_frame.cc",
#    "api/audio_codecs/audio_encoder.cc",
#    "api/audio_codecs/ilbc/audio_decoder_ilbc.cc",
#    "api/audio_codecs/ilbc/audio_encoder_ilbc.cc",
#    "api/audio_codecs/audio_encoder_factory.cc",
#    "api/audio_codecs/audio_decoder_factory.cc",
#    "api/audio_codecs/g722/audio_encoder_g722.cc",
#    "api/audio_codecs/g722/audio_decoder_g722.cc",
#    "api/audio_codecs/isac/audio_encoder_isac_float.cc",
#    "api/audio_codecs/isac/audio_decoder_isac_float.cc",
#    "api/audio_codecs/isac/audio_encoder_isac_fix.cc",
#    "api/audio_codecs/isac/audio_decoder_isac_fix.cc",
#    "api/audio_codecs/L16/audio_encoder_L16.cc",
#    "api/audio_codecs/L16/audio_decoder_L16.cc",
#    "api/audio_codecs/opus/audio_encoder_opus_config.cc",
#    "api/audio_codecs/opus/audio_decoder_opus.cc",
#    "api/audio_codecs/opus/audio_encoder_opus.cc",
#    "api/audio_codecs/g711/audio_decoder_g711.cc",
#    "api/audio_codecs/g711/audio_encoder_g711.cc",
#    "api/audio_codecs/audio_decoder.cc",
#    "api/audio_codecs/audio_codec_pair_id.cc",
#    "api/audio_codecs/builtin_audio_encoder_factory.cc",
#    "api/audio_codecs/audio_format.cc",
#    "api/audio_codecs/builtin_audio_decoder_factory.cc",
#    "api/optional.cc",
    "api/rtpparameters.cc",
    "api/statstypes.cc",
    "api/rtcerror.cc"
]

thirdparty_sources = [thirdparty_dir + f for f in thirdparty_sources]


if not env_webrtc["platform"] == "javascript": # No need to add third party libraries to javascript at all
    env_webrtc.add_source_files(env.modules_sources, thirdparty_sources)
    env_webrtc.Append(CPPPATH=[thirdparty_dir])
    env_webrtc.Append(CCFLAGS=["-std=c++11"])

    if env_webrtc["platform"] == "windows" or env_webrtc["platform"] == "uwp":
            env_webrtc.Append(CCFLAGS=["-DWEBRTC_WIN", "-D_WINSOCKAPI_", "/showIncludes"])
    else:
        env_webrtc.Append(CCFLAGS=["-DWEBRTC_POSIX"])

env_webrtc.add_source_files(env.modules_sources, "*.cpp")
